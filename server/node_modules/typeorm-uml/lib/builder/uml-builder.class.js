"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UmlBuilder = void 0;
const ConnectionMetadataBuilder_1 = require("typeorm/connection/ConnectionMetadataBuilder");
class UmlBuilder {
    constructor(connection, flags, styles) {
        this.connection = connection;
        this.flags = flags;
        this.styles = styles;
    }
    async buildUml() {
        const connectionMetadataBuilder = new ConnectionMetadataBuilder_1.ConnectionMetadataBuilder(this.connection);
        const entityMetadatas = await connectionMetadataBuilder.buildEntityMetadatas(this.connection.options.entities || []);
        if (!entityMetadatas.length) {
            throw new Error('No entities have been found. Please, check your typeorm config to make sure you have configured it correctly.');
        }
        let uml = '@startuml\n\n' + this.styles.toString();
        const exclude = (this.flags.exclude || '').split(',').filter((item) => item.trim().length);
        const include = (this.flags.include || '').split(',').filter((item) => item.trim().length);
        let foreignKeys = '';
        for (let i = 0, len = entityMetadatas.length; i < len; i++) {
            const entity = entityMetadatas[i];
            if (exclude.includes(entity.name)) {
                continue;
            }
            if (include.length && !include.includes(entity.name)) {
                continue;
            }
            uml += `\ntable( ${entity.name}, ${entity.tableNameWithoutPrefix} ) as ${entity.tableNameWithoutPrefix} {\n${entity.columns.map(this.buildColumn, this).join('')}}\n`;
            foreignKeys += this.buildForeignKeys(entity);
        }
        if (foreignKeys.length > 0) {
            uml += `\n${foreignKeys}\n`;
        }
        uml += '@enduml\n';
        return uml;
    }
    buildColumn(column) {
        let columnName = '';
        let suffix = '';
        if (column.isPrimary) {
            columnName = `pkey( ${column.databaseName} )`;
        }
        else if (column.referencedColumn) {
            suffix += '<<FK>>';
            columnName = `fkey( ${column.databaseName} )`;
        }
        else {
            columnName = `column( ${column.databaseName} )`;
        }
        let length = this.getColumnLength(column);
        const type = this.connection.driver.normalizeType(column);
        if (!length && this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[type]) {
            length = this.getColumnLength(this.connection.driver.dataTypeDefaults[type]);
        }
        if (length) {
            length = `(${length})`;
        }
        return `  ${columnName}: ${type.toUpperCase()}${length} ${suffix}\n`;
    }
    buildForeignKeys(entity) {
        let uml = '';
        if (entity.foreignKeys.length > 0) {
            for (let i = 0, len = entity.foreignKeys.length; i < len; i++) {
                uml += this.buildForeignKey(entity.foreignKeys[i], entity);
            }
        }
        return uml;
    }
    buildForeignKey(foreignKey, entity) {
        var _a;
        const { columns } = foreignKey;
        const zeroOrMore = 'o{';
        const oneOrMore = '|{';
        let relationship = columns.some((column) => !column.isNullable) ? oneOrMore : zeroOrMore;
        if (columns.length === 1 && ((_a = columns[0].relationMetadata) === null || _a === void 0 ? void 0 : _a.isOneToOne)) {
            relationship = '||';
        }
        return `"${foreignKey.referencedTablePath}" ||--${relationship} "${entity.tableNameWithoutPrefix}"\n`;
    }
    getColumnLength(column) {
        if (column.length) {
            return column.length;
        }
        if (column.width) {
            return column.width.toString();
        }
        if (column.precision) {
            if (column.scale) {
                return `${column.precision}, ${column.scale}`;
            }
            return column.precision.toString();
        }
        if (this.flags['with-enum-values'] && column.enum) {
            return column.enum.join(', ');
        }
        return '';
    }
}
exports.UmlBuilder = UmlBuilder;
